---

- name: SYSTEM TWEAKS
  hosts: all
  tags: system_tweaks

  vars:
    - ansible_python_interpreter: /usr/bin/python3
    - ansible_local: "/home/vagrant/.ansible"
    - python3_local: "/home/vagrant/.local/lib/python3.8/site-packages"

  tasks:
    - name: CREATE FOLDERS
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ ansible_local }}/plugins/modules"
        - "{{ ansible_local }}/plugins/filter"
        - "{{ ansible_local }}/plugins/action"
        - "{{ ansible_local }}/roles"

    - name: SUPPRESS UBUNTU MOTD & LASTLOGIN
      become: true
      shell: |
        chmod a-x /etc/update-motd.d/*
        echo "PrintLastLog no" >> /etc/ssh/sshd_config
        systemctl reload ssh.service
      args:
        warn: false

    - name: SET HOSTNAME
      become: true
      hostname:
        name: ants

    - name: CREATE /ANTS
      become: true
      file:
        path: /ants
        state: directory
        mode: 0755
        owner: vagrant
        group: vagrant

    - name: COPY VARIOUS FILES FOR ROOT AND VAGRANT
      become: true
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
        backup: true
      loop:
        - {src: 'files/motd', dest: '/etc/motd',
           owner: root, group: root, mode: 644}
        - {src: 'files/bash.sh', dest: '/root/.bash.sh',
           owner: root, group: root, mode: 644}
        - {src: 'files/dir_colors', dest: '/root/.dir_colors',
           owner: root, group: root, mode: 644}
        - {src: 'files/vim/vimrc', dest: '/root/.vimrc',
           owner: root, group: root, mode: 644}
        - {src: 'files/vim/', dest: '/root/.vim',
           owner: root, group: root, mode: preserve}

        - {src: 'files/bash.sh', dest: '/home/vagrant/.bash.sh',
           owner: vagrant, group: vagrant, mode: 644}
        - {src: 'files/dir_colors', dest: '/home/vagrant/.dir_colors',
           owner: vagrant, group: vagrant, mode: 644}
        - {src: 'files/vim/vimrc', dest: '/home/vagrant/.vimrc',
           owner: vagrant, group: vagrant, mode: 644}
        - {src: 'files/vim/', dest: '/home/vagrant/.vim',
           owner: vagrant, group: vagrant, mode: preserve}

    - name: BASHRC FOR USER - VAGRANT
      lineinfile:
        path: /home/vagrant/.bashrc
        insertafter: EOF
        line: source /home/vagrant/.bash.sh

    - name: BASHRC FOR USER - ROOT
      become: true
      lineinfile:
        path: /root/.bashrc
        insertafter: EOF
        line: source /root/.bash.sh


- name: INSTALL SYSTEM PACKAGES
  hosts: all
  tags: install_system

  vars_files:
    - ants.yml

  vars:
    - apt_list: "{{ ants | json_query(
                    'package_groups[].packages[?installed_by==`apt`][].name')
                 }}"
    - ansible_python_interpreter: /usr/bin/python3
    - ansible_local: "/home/vagrant/.ansible"
    - python3_local: "/home/vagrant/.local/lib/python3.8/site-packages"

  tasks:

    - name: UPDATE SYSTEM PACKAGES
      become: true
      apt:
        update_cache: true
        cache_valid_time: 3600
        upgrade: dist

    - debug:
        msg: "Installing via apt: {{ apt_list }}"

    - name: INSTALL PACKAGES VIA APT
      become: true
      apt:
        name: "{{ apt_list }}"
        state: latest
        install_recommends: false


- name: INSTALL PYTHON PACKAGES
  hosts: all
  tags: install_pip

  vars_files:
    - ants.yml

  vars:
    - pip3_list: "{{ ants | json_query(
                    'package_groups[].packages[?installed_by==`pip3`][]')
                 }}"
    - ansible_python_interpreter: /usr/bin/python3
    - ansible_local: "/home/vagrant/.ansible"
    - python3_local: "/home/vagrant/.local/lib/python3.8/site-packages"

  tasks:
    - debug:
        msg: "Installing via pip3: {{ pip3_list | json_query('[].name') }}"

    - name: GENERATE REQUIREMENTS.TXT
      template:
        src: files/requirements.j2
        dest: /vagrant/requirements.txt

    - name: INSTALL PYTHON3 PACKAGES VIA PIP3
      pip:
        requirements: "/vagrant/requirements.txt"
        # 2020-resolver will become default in pip 20.3
        extra_args: --user -U --use-feature=2020-resolver
        executable: pip3

    - name: VALIDATE ALL PIP3 DEPENDENCIES ARE IN ORDER
      shell: pip3 check


- name: INSTALL DOCKER UTILS AND CONTAINERS
  hosts: all
  tags: install_containers

  vars_files:
    - ants.yml

  vars:
    - docker_image_list: "{{ ants | json_query(
                    'package_groups[].packages[?installed_by==`docker`][].name')
                 }}"
    - docker_start_list: "{{ ants | json_query(
                    'package_groups[].packages[?installed_by==`docker` &&
                    autostart][]')
                 }}"
    - ansible_python_interpreter: /usr/bin/python3
    - ansible_local: "/home/vagrant/.ansible"
    - python3_local: "/home/vagrant/.local/lib/python3.8/site-packages"
    - DOCKER_COMPOSE_VERSION: "{{ ants | json_query(
                    'package_groups[].packages[?name==`docker-compose`][].version')
                    | first
                 }}"

  tasks:
    - debug:
        msg: "Fetching docker images: {{ docker_image_list }}"

    - name: PULL DOCKER IMAGES LOCALLY
      docker_image:
        name: "{{ item }}"
        tag: latest
      loop: "{{ docker_image_list | list }}"

    - debug:
        msg: "Starting docker containers: {{ docker_start_list }}"

    - name: START DOCKER CONTAINERS
      docker_container:
        name: "{{ item | replace('/', '_') }}"
        image: "{{ item.name }}:{{ item.version }}:"
        published_ports: "{{ item.host_port }}:{{ item.container_port }}"
      loop: "{{ docker_start_list | list }}"

    - name: CREATE DOCKER PLUGINS DIR
      become: true
      file:
        name: "/usr/local/lib/docker/cli-plugins"
        owner: root
        group: root
        mode: "755"
        state: directory

    - name: DOWNLOAD DOCKER-COMPOSE {{ DOCKER_COMPOSE_VERSION }}
      become: true
      get_url:
        url: "https://github.com/docker/compose/releases/download/\
              {{ DOCKER_COMPOSE_VERSION }}/docker-compose-linux-x86_64"
        dest: "/usr/local/lib/docker/cli-plugins/docker-compose"
        mode: "755"
        # TOFIX - doesn't seem to work because of redirects
        checksum: "sha256:https://github.com/docker/compose/releases/download/\
              {{ DOCKER_COMPOSE_VERSION }}/docker-compose-linux-x86_64.sha256"


- name: INSTALL OTHER PACKAGES
  hosts: all
  tags: install_other

  vars_files:
    - ants.yml

  vars:
    - git_clone_list: "{{ ants | json_query(
                    'package_groups[].packages[?installed_by==`git`][]')
                 }}"
    - ansible_galaxy_list: "{{ ants | json_query(
                    'package_groups[].packages[?installed_by==`ansible-galaxy`][]')
                 }}"
    - ansible_python_interpreter: /usr/bin/python3
    - ansible_local: "/home/vagrant/.ansible"
    - python3_local: "/home/vagrant/.local/lib/python3.8/site-packages"

  tasks:
    - debug:
        msg: "Cloning via git: {{ git_clone_list | json_query('[].name') }}"

    - name: CLONE GIT REPOSITORIES
      git:
        repo: "{{ item.url }}"
        dest: "{{ item.dest }}"
        recursive: true
        force: true
        depth: 1
      loop: "{{ git_clone_list | list }}"

    - debug:
        msg: "Ansible galaxy roles: {{ ansible_galaxy_list |
              json_query('[].name') }}"

    - name: INSTALL ANSIBLE GALAXY ROLES
      command: "ansible-galaxy install {{ item.name }}"
      loop: "{{ ansible_galaxy_list | list }}"

    - name: CREATE SYMLINKS
      file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: link
        force: true
      loop:
        - {src: '{{ python3_local }}/napalm_ansible/modules/',
           dest: '{{ ansible_local }}/plugins/modules/napalm_ansible'}
        - {src: '{{ python3_local }}/napalm_ansible/plugins/action/',
           dest: '{{ ansible_local }}/plugins/action/napalm_ansible'}
